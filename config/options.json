{
    "__app__": {},
    "add_deps": {
        "aliases": "--add-deps",
        "info": "Add dependencies",
        "nested": true
    },
    "authors": {
        "nested": true,
        "nvalues": "1,*",
        "values": "Full Name"
    },
    "bump_version": {
        "args": "filenpa_conf,increment,not_git,pkg_name,path_deps,path_pkg",
        "info": "Increment package version",
        "nvalues": "?",
        "values": "VERSION"
    },
    "description": {
        "nested": true,
        "values": "Package Description"
    },
    "export_bin": {
        "aliases": "--export-bin",
        "args": "from_repo,filenpa_conf,not_git,path_bin,path_pkg,pkg_name,pkg_version",
        "info": "Send refined project 'current state' or 'selected version' to /data/bin and create symlink or send to path."
    },
    "export_rel": {
        "aliases": "--export-rel",
        "args": "add_deps,filenpa_conf,from_repo,not_git,path_pkg,path_repo,pkg_version",
        "info": "Send refined project 'selected version' to /$project_path/rel or path."
    },
    "filen_main": {
        "nested": true,
        "info": "Package main file if any, just the full name",
        "values": "main_file"
    },
    "filenpa_conf": {
        "nested": true,
        "info": "package JSON config file path. It can be relative or absolute.",
        "values": "FILE_JSON"
    },
    "from_repo": {
        "args": "pkg_name",
        "required": "pkg_name",
        "nested": true,
        "info": "Direpa source comes from repository,",
        "nvalues": "?",
        "values": "direpa_repo"
    },
    "generate_db": {
        "aliases": "-g,--generate-db,--gen,--gd",
        "info": "list all folders in repository and generate the db.json."
    },
    "import_pkgs": {
        "aliases": "-i,--import",
        "args": "filenpa_conf,packages,no_conf_dst,no_conf_src,no_root_dir,not_git,path_deps,path_dst",
        "required": "packages",
        "info": "import packages in a git project with a folder gpkgs."
    },
    "increment": {
        "info": "Add this flag to increment the current version before bumping.",
        "nested": true
    },
    "set_conf": {
        "args": "authors,description,filen_main,filenpa_conf,licenses,pkg_name,pkg_version,uuid4",
        "info": "create a config file for a new project."
    },
    "licenses": {
        "nested": true,
        "nvalues": "1,*",
        "values": "MIT|None"
    },
    "ls_repo": {
        "aliases": "-l,--ls,--ls-repo",
        "args": "packages,add_deps",
        "info": "List all packages in the repo. You can add name(s) to filter by names."
    },
    "no_conf_dst": {
        "info": "Do not import the conf file with the imported package",
        "nested": true
    },
    "no_conf_src": {
        "info": "Allow to process the command with having a configuration file.",
        "nested": true
    },
    "no_root_dir": {
        "info": "Package content is copied without the package name root directory.",
        "nested": true
    },
    "not_git": {
        "info": "Allow working with packages that does not have a .git folder",
        "nested": true
    },
    "packages": {
        "aliases": "-p,--pkgs,--packages",
        "info": "Packages are identified with the following syntax uuid4,name,version,pkg_bound . Generally you just select the name, but you can also use the uuid4, and the version. To import a package you have to name the packages. if only name, latest version of the package is selected and package bound is going to be gpm. if name,version then version is a filter and several options are possible: major.minor.patch each element can be a number, the letter L for latest or the letter A for any . It allows advanced filters to display and select packages.",
        "nested": true,
        "nvalues": "*",
        "values": "PGK_FILTER"
    },
    "path_bin": {
        "info": "Select Bin Path (can be relative or absolute).",
        "nested": true,
        "values": "PATH"
    },
    "path_deps": {
        "info": "Select directory destination path for dependencies (can be relative or absolute). If path is omitted, current directory is selected",
        "nested": true,
        "nvalues": "?",
        "values": "PATH"
    },
    "path_dst": {
        "info": "Select directory destination path (can be relative or absolute).",
        "nested": true,
        "values": "PATH"
    },
    "path_pkg": {
        "info": "Select directory package path (can be relative or absolute).",
        "nested": true,
        "values": "PATH"
    },
    "path_repo": {
        "info": "Select Repository Path (can be relative or absolute).",
        "nested": true,
        "values": "PATH"
    },
    "path_src": {
        "info": "Select directory source path (can be relative or absolute).",
        "nested": true,
        "values": "PATH"
    },
    "pkg_name": {
        "aliases": "--pkg-name,--pname",
        "info": "package name",
        "nested": true,
        "values": "PKG_NAME"
    },
    "pkg_version": {
        "aliases": "--pversion,--pv,--pkg-version,--rversion",
        "info": "Select version.",
        "nested": true,
        "values": "VERSION"
    },
    "remove": {
        "args": "filenpa_conf,packages,no_conf_src,no_root_dir,not_git,path_deps,path_pkg",
        "aliases": "-r,--remove",
        "info": "Remove packages installed in directory"
    },
    "repo_strip": {
        "info": "Remove all versions of a package except the latest. Select specific packages or no packages to run the function on all packages",
        "nvalues": "*",
        "values": "PKG_NAMES"
    },
    "restore": {
        "args": "filenpa_conf,not_git,path_deps,path_pkg",
        "info": "Reinstall all dependencies from gpm.json"
    },
    "set_bump_deploy": {
        "info": "Generate bump_version.py and deploy.py files. It also repair symlinks if they are broken."
    },
    "steps": {
        "info": "Give the main steps to create an application."
    },
    "switch_bin": {
        "aliases": "--switch-bin,--sb",
        "args": "pkg_name,pkg_version",
        "info": "Given an application name and a version, then current executable in the path is switched to that version. For pkg_version choose 'latest' to get the latest version available from bin. You can also choose 'beta' if available",
        "required": "pkg_name,pkg_version"
    },
    "to_repo": {
        "info": "Send Package from repo to another",
        "nested": true,
        "values": "direpa_repo"
    },
    "update": {
        "aliases": "-u,--update",
        "values": "PKG_NAMES"
    },
    "upgrade": {
        "aliases": "--upgrade,--ug",
        "values": "PKG_NAMES"
    },
    "uuid4": {
        "nested": true,
        "values": "UUID4"
    }
}