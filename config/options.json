{
    "__app__": {},
    "add_deps": {
        "aliases": "--add-deps",
        "info": "Add dependencies",
        "nested": true
    },
    "beta": {
        "info": "Add this flag to send the current state to bin as beta.",
        "nested": true
    },
    "authors": {
        "nested": true,
        "nvalues": "1,*",
        "values": "Full Name"
    },
    "bump_version": {
        "args": "filenpa_conf,increment,major,minor,not_git,patch,path_pkg,pkg_alias",
        "info": "Increment package version",
        "nvalues": "?",
        "values": "VERSION"
    },
    "conf_from_rel": {
        "info": "package configuration can be retrieved from a release repository",
        "nested": true,
        "type": "directory",
        "nvalues": "?",
        "values": "DIREPA_REPO_REL"
    },
    "description": {
        "nested": true,
        "values": "Package Description"
    },
    "examples": {},
    "filter_rules": {
        "info": "gitignore like rules to filter source path",
        "nested": true,
        "nvalues": "+",
        "values": "RULE"
    },
    "filen_main": {
        "nested": true,
        "info": "Package main file if any, just the full name",
        "values": "main_file"
    },
    "filenpa_conf": {
        "nested": true,
        "info": "package JSON config file path. It can be relative or absolute.",
        "type": "virtualpath",
        "values": "FILE_JSON"
    },
    "from_bin": {
        "args": "pkg_alias",
        "required": "pkg_alias",
        "info": "Transfer package from default binaries repository or from selected binaries repository",
        "nested": true,
        "nvalues": "?",
        "type": "directory",
        "values": "DIREPA_REPO_BIN"
    },
    "from_pkg": {
        "args": "conf_from_rel,filenpa_conf,no_conf,not_git",
        "info": "Transfer package from current directory or from selected directory. If --version is specified then package is considered a git package.",
        "nested": true,
        "nvalues": "?",
        "type": "directory",
        "values": "DIREPA_PKG"
    },
    "from_rel": {
        "args": "no_deps",
        "info": "Transfer package from default releases repository or from selected releases repository",
        "nested": true,
        "nvalues": "?",
        "type": "directory",
        "values": "DIREPA_REPO_REL"
    },
    "from_src": {
        "info": "Transfer package from default sources repository or from selected sources repository",
        "nested": true,
        "nvalues": "?",
        "type": "directory",
        "values": "DIREPA_REPO_SRC"
    },
    "from_wrk": {
        "args": "pkg_alias",
        "required": "pkg_alias",
        "info": "Transfer package from default work repository or from selected work repository",
        "nested": true,
        "nvalues": "?",
        "type": "directory",
        "values": "DIREPA_REPO_WRK"
    },
    "generate_db": {
        "args": "path_rel",
        "aliases": "-g,--generate-db,--gen,--gd",
        "info": "list all folders in repository and generate the db.json."
    },
    "import_pkgs": {
        "aliases": "-i,--import",
        "args": "filenpa_conf,filter_rules,package_filters,no_conf_dst,no_conf_src,no_root_dir,not_git,path_deps,path_pkg,path_rel,keys",
        "required": "package_filters",
        "info": "import packages in a git project with a folder gpkgs."
    },
    "increment": {
        "info": "Add this flag to increment the current version before bumping.",
        "nested": true
    },
    "keys": {
        "nested": true,
        "info": "If keys is present, the imported package is considered a template and its files are going to be copied first in a tmp directory. Then the files are going to be scanned for {{placeholders}}. If keys json values are provided then they are going to autofill the related {{placeholders}} else for each found values not provided the user is going to be prompted to enter the value. regex syntax for placeholders {{([a-zA-Z0-9-_ ]+?)}}",
        "type": "json",
        "nvalues": "?",
        "values": "JSON"
    },
    "licenses": {
        "nested": true,
        "nvalues": "1,*",
        "values": "MIT|None"
    },
    "ls_rel": {
        "aliases": "-l,--ls,--ls-rel",
        "args": "add_deps,package_filters,path_rel",
        "info": "List all packages in the release repository. You can add alias(es) to filter by aliases."
    },
    "major": {
        "nested": true
    },
    "minor": {
        "nested": true
    },
    "no_conf": {
        "info": "Allow to process the command without having a configuration file.",
        "nested": true
    },
    "no_conf_dst": {
        "info": "Do not import the conf file with the imported package",
        "nested": true
    },
    "no_conf_src": {
        "info": "Allow to process the command without having a configuration file.",
        "nested": true
    },
    "no_symlink": {
        "info": "When pushing a bin pkg to an sshfs mount bin from another system, like from linux to windows then use no symlink and use mlink on windows computer to restore the symlink.",
        "nested": true
    },
    "no_deps": {
        "aliases": "--no-deps",
        "info": "Do not add dependencies",
        "nested": true
    },
    "no_root_dir": {
        "info": "Package content is copied without the package alias root directory.",
        "nested": true
    },
    "not_git": {
        "info": "Allow working with packages that does not have a .git folder",
        "nested": true
    },
    "only_paths": {
        "info": "Select directories or files that are going to be selected for the package",
        "nested": true,
        "nvalues": "+",
        "values": "PATH"
    },
    "overwrite": {
        "nested": true
    },
    "packages": {
        "aliases": "-p,--pkgs,--packages",
        "nested": true,
        "nvalues": "*",
        "values": "PKG_ALIASES"
    },
    "package_filters": {
        "aliases": "--pfs,--pkg-filters",
        "info": "Package filters are comma separated string. The fields are bound, alias, version, uuid4. Fields order does not matter and not all fields need to be present",
        "nested": true,
        "nvalues": "+",
        "values": "PKG_FILTERS"
    },
    "patch": {
        "nested": true
    },
    "path_bin": {
        "info": "Select Bin Path (can be relative or absolute).",
        "nested": true,
        "type": "directory",
        "values": "PATH"
    },
    "path_deps": {
        "info": "Select directory destination path for dependencies (can be relative or absolute). If path is omitted, --path-pkg or current directory is selected.",
        "nested": true,
        "nvalues": "?",
        "type": "virtualpath",
        "values": "PATH"
    },
    "path_pkg": {
        "info": "Select directory package path (can be relative or absolute).",
        "nested": true,
        "type": "directory",
        "values": "PATH"
    },
    "path_rel": {
        "info": "Select Repository Path (can be relative or absolute).",
        "nested": true,
        "values": "PATH"
    },
    "pkg_alias": {
        "aliases": "--pkg-alias,--palias",
        "info": "package alias, or package name if alias has not been set.",
        "nested": true,
        "values": "PKG_ALIAS"
    },
    "pkg_name": {
        "aliases": "--pkg-name,--pname",
        "info": "package alias, or package name if alias has not been set.",
        "nested": true,
        "values": "PKG_NAME"
    },
    "path_project": {
        "nested": true,
        "type": "directory",
        "nvalues": "?",
        "values": "PATH"
    },
    "pkg_version": {
        "aliases": "--pversion,--pv,--pkg-version,--rversion",
        "info": "Select version.",
        "nested": true,
        "values": "VERSION"
    },
    "remove": {
        "args": "filenpa_conf,packages,no_conf_src,no_root_dir,not_git,path_deps,path_pkg",
        "aliases": "-r,--remove",
        "info": "Remove packages installed in directory"
    },
    "rel_strip": {
        "args": "path_rel",
        "info": "Remove all versions of a package except the latest. Select specific packages or no packages to run the function on all packages",
        "nvalues": "*",
        "values": "PKG_ALIASES"
    },
    "restore": {
        "args": "filenpa_conf,not_git,path_deps,path_pkg",
        "info": "Reinstall all dependencies from gpm.json"
    },
    "set_conf": {
        "args": "authors,description,filen_main,filenpa_conf,licenses,pkg_alias,pkg_name,pkg_version,uuid4",
        "info": "create a config file for a new project."
    },
    "set_launcher": {
        "args": "overwrite,path_project",
        "info": "Generate scriptjob_save.json file or launch.pyw for windows for quick project opening.",
        "nvalues": "?",
        "values": "PKG_ALIAS"
    },
    "switch_bin": {
        "aliases": "--switch-bin,--sb",
        "args": "path_bin,pkg_alias,pkg_version",
        "info": "Given an application alias and a version, then current executable in the path is switched to that version. For pkg_version choose 'latest' to get the latest version available from bin. You can also choose 'beta' if available",
        "required": "pkg_alias,pkg_version"
    },
    "to_bin": {
        "args": "beta,filen_main,no_symlink",
        "info": "Transfer package to default binaries repository or to selected binaries repository",
        "nested": true,
        "nvalues": "?",
        "type": "virtualpath",
        "values": "DIREPA_REPO_BIN"
    },
    "to_pkg": {
        "info": "Transfer package to current directory or to selected directory.",
        "nested": true,
        "nvalues": "?",
        "type": "virtualpath",
        "values": "DIREPA_PKG"
    },
    "to_rel": {
        "args": "no_deps",
        "info": "Transfer package to default releases repository or to selected releases repository",
        "nested": true,
        "nvalues": "?",
        "type": "virtualpath",
        "values": "DIREPA_REPO_REL"
    },
    "to_src": {
        "info": "Transfer package to default sources repository or to selected sources repository",
        "nested": true,
        "nvalues": "?",
        "type": "virtualpath",
        "values": "DIREPA_REPO_SRC"
    },
    "to_wrk": {
        "info": "Transfer package to default work repository or to selected work repository",
        "nested": true,
        "nvalues": "?",
        "type": "virtualpath",
        "values": "DIREPA_REPO_WRK"
    },
    "transfer": {
        "aliases": "-t,--transfer",
        "args": "from_bin,from_pkg,from_rel,from_src,from_wrk,only_paths,package_filters,to_bin,to_pkg,to_rel,to_src,to_wrk",
        "info": "Package is selected from one location and transfered to another. If the 'from location type' and the 'to location type' does not match then package is converted at destination type if supported."
    },
    "update": {
        "args": "not_git,path_deps,path_pkg,path_rel",
        "aliases": "-u,--update",
        "nvalues": "*",
        "values": "PKG_ALIASES"
    },
    "upgrade": {
        "args": "not_git,path_deps,path_pkg,path_rel",
        "aliases": "--upgrade,--ug",
        "nvalues": "*",
        "values": "PKG_ALIASES"
    },
    "uuid4": {
        "nested": true,
        "values": "UUID4"
    }
}